{"version":3,"file":"focus-trap.js","sourceRoot":"","sources":["../../src/util/focus-trap.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,SAAS,EAAa,MAAM,MAAM,CAAC;AAC3C,OAAO,EAAC,MAAM,EAAE,GAAG,EAAE,SAAS,EAAE,cAAc,EAAC,MAAM,gBAAgB,CAAC;AACtE,OAAO,EAAC,GAAG,EAAC,MAAM,aAAa,CAAC;AAEhC,IAAM,2BAA2B,GAAG;IAClC,SAAS,EAAE,wBAAwB,EAAE,4CAA4C,EAAE,wBAAwB;IAC3G,0BAA0B,EAAE,mBAAmB,EAAE,iCAAiC;CACnF,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;;;;AAKb,sCAAsC,OAAoB;IACxD,IAAM,IAAI,GAA4B,OAAO,CAAC,gBAAgB,CAAC,2BAA2B,CAAC,CAAC;IAC5F,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;CACzC;;;;;;;;;;AAWD,MAAM,CAAC,IAAM,YAAY,GAAG,UAAC,OAAoB,EAAE,cAA+B;;IAEhF,IAAM,mBAAmB,GACrB,SAAS,CAAa,OAAO,EAAE,SAAS,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,EAAE,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,MAAM,EAAR,CAAQ,CAAC,CAAC,CAAC;;IAGlG,SAAS,CAAgB,OAAO,EAAE,SAAS,CAAC;SACvC,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,EAAE,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,KAAK,KAAK,GAAG,CAAC,GAAG,EAAnB,CAAmB,CAAC,EAAE,cAAc,CAAC,mBAAmB,CAAC,CAAC;SACtG,SAAS,CAAC,UAAC,EAA0B;YAAzB,gBAAQ,EAAE,sBAAc;QACnC,gDAAM,aAAK,EAAE,YAAI,CAA0C;QAE3D,EAAE,CAAC,CAAC,cAAc,KAAK,KAAK,IAAI,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;YAClD,IAAI,CAAC,KAAK,EAAE,CAAC;YACb,QAAQ,CAAC,cAAc,EAAE,CAAC;SAC3B;QAED,EAAE,CAAC,CAAC,cAAc,KAAK,IAAI,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;YAClD,KAAK,CAAC,KAAK,EAAE,CAAC;YACd,QAAQ,CAAC,cAAc,EAAE,CAAC;SAC3B;KACF,CAAC,CAAC;;IAGP,SAAS,CAAC,OAAO,EAAE,OAAO,CAAC;SACtB,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,EAAE,cAAc,CAAC,mBAAmB,CAAC,EAAE,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,CAAC,CAAgB,EAArB,CAAqB,CAAC,CAAC;SACvG,SAAS,CAAC,UAAA,kBAAkB,IAAI,OAAA,kBAAkB,CAAC,KAAK,EAAE,EAA1B,CAA0B,CAAC,CAAC;CAClE,CAAC","sourcesContent":["import {fromEvent, Observable} from 'rxjs';\nimport {filter, map, takeUntil, withLatestFrom} from 'rxjs/operators';\nimport {Key} from '../util/key';\n\nconst FOCUSABLE_ELEMENTS_SELECTOR = [\n  'a[href]', 'button:not([disabled])', 'input:not([disabled]):not([type=\"hidden\"])', 'select:not([disabled])',\n  'textarea:not([disabled])', '[contenteditable]', '[tabindex]:not([tabindex=\"-1\"])'\n].join(', ');\n\n/**\n * Returns first and last focusable elements inside of a given element based on specific CSS selector\n */\nfunction getFocusableBoundaryElements(element: HTMLElement): HTMLElement[] {\n  const list: NodeListOf<HTMLElement> = element.querySelectorAll(FOCUSABLE_ELEMENTS_SELECTOR);\n  return [list[0], list[list.length - 1]];\n}\n\n/**\n * Function that enforces browser focus to be trapped inside a DOM element.\n *\n * Works only for clicks inside the element and navigation with 'Tab', ignoring clicks outside of the element\n *\n * @param element The element around which focus will be trapped inside\n * @param stopFocusTrap$ The observable stream. When completed the focus trap will clean up listeners\n * and free internal resources\n */\nexport const ngbFocusTrap = (element: HTMLElement, stopFocusTrap$: Observable<any>) => {\n  // last focused element\n  const lastFocusedElement$ =\n      fromEvent<FocusEvent>(element, 'focusin').pipe(takeUntil(stopFocusTrap$), map(e => e.target));\n\n  // 'tab' / 'shift+tab' stream\n  fromEvent<KeyboardEvent>(element, 'keydown')\n      .pipe(takeUntil(stopFocusTrap$), filter(e => e.which === Key.Tab), withLatestFrom(lastFocusedElement$))\n      .subscribe(([tabEvent, focusedElement]) => {\n        const[first, last] = getFocusableBoundaryElements(element);\n\n        if (focusedElement === first && tabEvent.shiftKey) {\n          last.focus();\n          tabEvent.preventDefault();\n        }\n\n        if (focusedElement === last && !tabEvent.shiftKey) {\n          first.focus();\n          tabEvent.preventDefault();\n        }\n      });\n\n  // inside click\n  fromEvent(element, 'click')\n      .pipe(takeUntil(stopFocusTrap$), withLatestFrom(lastFocusedElement$), map(arr => arr[1] as HTMLElement))\n      .subscribe(lastFocusedElement => lastFocusedElement.focus());\n};\n"]}