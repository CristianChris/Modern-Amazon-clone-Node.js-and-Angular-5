{"version":3,"file":"popover.js","sourceRoot":"","sources":["../../src/popover/popover.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Component,\n  Directive,\n  Input,\n  Output,\n  EventEmitter,\n  ChangeDetectionStrategy,\n  OnInit,\n  OnDestroy,\n  OnChanges,\n  Injector,\n  Renderer2,\n  ComponentRef,\n  ElementRef,\n  TemplateRef,\n  ViewContainerRef,\n  ComponentFactoryResolver,\n  NgZone,\n  SimpleChanges\n} from '@angular/core';\n\nimport {listenToTriggers} from '../util/triggers';\nimport {positionElements, Placement, PlacementArray} from '../util/positioning';\nimport {PopupService} from '../util/popup';\nimport {NgbPopoverConfig} from './popover-config';\n\nlet nextId = 0;\n\n@Component({\n  selector: 'ngb-popover-window',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    '[class]':\n        '\"popover bs-popover-\" + placement.split(\"-\")[0]+\" bs-popover-\" + placement + (popoverClass ? \" \" + popoverClass : \"\")',\n    'role': 'tooltip',\n    '[id]': 'id'\n  },\n  template: `\n    <div class=\"arrow\"></div>\n    <h3 class=\"popover-header\">{{title}}</h3><div class=\"popover-body\"><ng-content></ng-content></div>`,\n  styles: [`\n    :host.bs-popover-top .arrow, :host.bs-popover-bottom .arrow {\n      left: 50%;\n      margin-left: -5px;\n    }\n\n    :host.bs-popover-top-left .arrow, :host.bs-popover-bottom-left .arrow {\n      left: 2em;\n    }\n\n    :host.bs-popover-top-right .arrow, :host.bs-popover-bottom-right .arrow {\n      left: auto;\n      right: 2em;\n    }\n\n    :host.bs-popover-left .arrow, :host.bs-popover-right .arrow {\n      top: 50%;\n      margin-top: -5px;\n    }\n\n    :host.bs-popover-left-top .arrow, :host.bs-popover-right-top .arrow {\n      top: 0.7em;\n    }\n\n    :host.bs-popover-left-bottom .arrow, :host.bs-popover-right-bottom .arrow {\n      top: auto;\n      bottom: 0.7em;\n    }\n  `]\n})\nexport class NgbPopoverWindow {\n  @Input() placement: Placement = 'top';\n  @Input() title: string;\n  @Input() id: string;\n  @Input() popoverClass: string;\n\n  constructor(private _element: ElementRef<HTMLElement>, private _renderer: Renderer2) {}\n\n  applyPlacement(_placement: Placement) {\n    // remove the current placement classes\n    this._renderer.removeClass(this._element.nativeElement, 'bs-popover-' + this.placement.toString().split('-')[0]);\n    this._renderer.removeClass(this._element.nativeElement, 'bs-popover-' + this.placement.toString());\n\n    // set the new placement classes\n    this.placement = _placement;\n\n    // apply the new placement\n    this._renderer.addClass(this._element.nativeElement, 'bs-popover-' + this.placement.toString().split('-')[0]);\n    this._renderer.addClass(this._element.nativeElement, 'bs-popover-' + this.placement.toString());\n  }\n}\n\n/**\n * A lightweight, extensible directive for fancy popover creation.\n */\n@Directive({selector: '[ngbPopover]', exportAs: 'ngbPopover'})\nexport class NgbPopover implements OnInit, OnDestroy, OnChanges {\n  /**\n   * Content to be displayed as popover. If title and content are empty, the popover won't open.\n   */\n  @Input() ngbPopover: string | TemplateRef<any>;\n  /**\n   * Title of a popover. If title and content are empty, the popover won't open.\n   */\n  @Input() popoverTitle: string;\n  /**\n   * Placement of a popover accepts:\n   *    \"top\", \"top-left\", \"top-right\", \"bottom\", \"bottom-left\", \"bottom-right\",\n   *    \"left\", \"left-top\", \"left-bottom\", \"right\", \"right-top\", \"right-bottom\"\n   * and array of above values.\n   */\n  @Input() placement: PlacementArray;\n  /**\n   * Specifies events that should trigger. Supports a space separated list of event names.\n   */\n  @Input() triggers: string;\n  /**\n   * A selector specifying the element the popover should be appended to.\n   * Currently only supports \"body\".\n   */\n  @Input() container: string;\n  /**\n   * A flag indicating if a given popover is disabled and should not be displayed.\n   *\n   * @since 1.1.0\n   */\n  @Input() disablePopover: boolean;\n  /**\n   * An optional class applied to ngb-popover-window\n   *\n   * @since 2.2.0\n   */\n  @Input() popoverClass: string;\n  /**\n   * Emits an event when the popover is shown\n   */\n  @Output() shown = new EventEmitter();\n  /**\n   * Emits an event when the popover is hidden\n   */\n  @Output() hidden = new EventEmitter();\n\n  private _ngbPopoverWindowId = `ngb-popover-${nextId++}`;\n  private _popupService: PopupService<NgbPopoverWindow>;\n  private _windowRef: ComponentRef<NgbPopoverWindow>;\n  private _unregisterListenersFn;\n  private _zoneSubscription: any;\n  private _isDisabled(): boolean {\n    if (this.disablePopover) {\n      return true;\n    }\n    if (!this.ngbPopover && !this.popoverTitle) {\n      return true;\n    }\n    return false;\n  }\n\n  constructor(\n      private _elementRef: ElementRef<HTMLElement>, private _renderer: Renderer2, injector: Injector,\n      componentFactoryResolver: ComponentFactoryResolver, viewContainerRef: ViewContainerRef, config: NgbPopoverConfig,\n      ngZone: NgZone) {\n    this.placement = config.placement;\n    this.triggers = config.triggers;\n    this.container = config.container;\n    this.disablePopover = config.disablePopover;\n    this.popoverClass = config.popoverClass;\n    this._popupService = new PopupService<NgbPopoverWindow>(\n        NgbPopoverWindow, injector, viewContainerRef, _renderer, componentFactoryResolver);\n\n    this._zoneSubscription = ngZone.onStable.subscribe(() => {\n      if (this._windowRef) {\n        this._windowRef.instance.applyPlacement(\n            positionElements(\n                this._elementRef.nativeElement, this._windowRef.location.nativeElement, this.placement,\n                this.container === 'body'));\n      }\n    });\n  }\n\n  /**\n   * Opens an element’s popover. This is considered a “manual” triggering of the popover.\n   * The context is an optional value to be injected into the popover template when it is created.\n   */\n  open(context?: any) {\n    if (!this._windowRef && !this._isDisabled()) {\n      this._windowRef = this._popupService.open(this.ngbPopover, context);\n      this._windowRef.instance.title = this.popoverTitle;\n      this._windowRef.instance.popoverClass = this.popoverClass;\n      this._windowRef.instance.id = this._ngbPopoverWindowId;\n\n      this._renderer.setAttribute(this._elementRef.nativeElement, 'aria-describedby', this._ngbPopoverWindowId);\n\n      if (this.container === 'body') {\n        window.document.querySelector(this.container).appendChild(this._windowRef.location.nativeElement);\n      }\n\n      // apply styling to set basic css-classes on target element, before going for positioning\n      this._windowRef.changeDetectorRef.detectChanges();\n      this._windowRef.changeDetectorRef.markForCheck();\n\n      // position popover along the element\n      this._windowRef.instance.applyPlacement(\n          positionElements(\n              this._elementRef.nativeElement, this._windowRef.location.nativeElement, this.placement,\n              this.container === 'body'));\n\n      this.shown.emit();\n    }\n  }\n\n  /**\n   * Closes an element’s popover. This is considered a “manual” triggering of the popover.\n   */\n  close(): void {\n    if (this._windowRef) {\n      this._renderer.removeAttribute(this._elementRef.nativeElement, 'aria-describedby');\n      this._popupService.close();\n      this._windowRef = null;\n      this.hidden.emit();\n    }\n  }\n\n  /**\n   * Toggles an element’s popover. This is considered a “manual” triggering of the popover.\n   */\n  toggle(): void {\n    if (this._windowRef) {\n      this.close();\n    } else {\n      this.open();\n    }\n  }\n\n  /**\n   * Returns whether or not the popover is currently being shown\n   */\n  isOpen(): boolean { return this._windowRef != null; }\n\n  ngOnInit() {\n    this._unregisterListenersFn = listenToTriggers(\n        this._renderer, this._elementRef.nativeElement, this.triggers, this.open.bind(this), this.close.bind(this),\n        this.toggle.bind(this));\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // close popover if title and content become empty, or disablePopover set to true\n    if ((changes['ngbPopover'] || changes['popoverTitle'] || changes['disablePopover']) && this._isDisabled()) {\n      this.close();\n    }\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._unregisterListenersFn();\n    this._zoneSubscription.unsubscribe();\n  }\n}\n"]}